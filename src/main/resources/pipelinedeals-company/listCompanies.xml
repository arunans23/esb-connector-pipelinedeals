<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- Method Documentation URL: https://www.pipelinedeals.com/api/docs/resources/companies -->
<template name="listCompanies" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="page" description="No. of the page to retrieve when results are paginated."/>
    <parameter name="perPage" description="Entries to list per page when results are paginated."/>
    <parameter name="searchId" description="Search companies by previously saved filter with given search_id."/>
    <parameter name="sort" description="Field to sort the companies on. Use a - minus sign for descending order."/>
    <parameter name="companyId" description="The company with given company_id."/>
    <parameter name="companyName"
               description="Return companies that have a name that exactly matches or starts with the provided string."/>
    <parameter name="companyDescription"
               description="Return companies that have a description that exactly matches or starts with the provided string."/>
    <parameter name="companyEmail"
               description="Return companies that have an email that exactly matches or starts with the provided string."/>
    <parameter name="companyPhone"
               description="Return companies that have a fax number that exactly matches or starts with the provided string."/>
    <parameter name="companyFax"
               description="Return companies that have a fax number that exactly matches or starts with the provided string."/>
    <parameter name="companyAddress"
               description="Return companies that have an address that exactly matches or starts with the provided string."/>
    <parameter name="companyAddress2"
               description="Return companies that have a secondary address that exactly matches or starts with the provided string."/>
    <parameter name="companyCity"
               description="Return companies that have a city that exactly matches or starts with the provided string."/>
    <parameter name="companyState"
               description="Return companies that have a state that exactly matches or starts with the provided string."/>
    <parameter name="companyZip"
               description="Return companies that have a postal code that exactly matches or starts with the provided string."/>
    <parameter name="companyCountry"
               description="Return companies that have a country that exactly matches or starts with the provided string."/>
    <parameter name="companyCreatedFromDate" description="Companies created within the specified date range."/>
    <parameter name="companyModifiedFromDate" description="Companies updated within the specified date range."/>
    <parameter name="companyCreatedToDate" description="Companies created within the specified date range."/>
    <parameter name="companyModifiedToDate" description="Companies updated within the specified date range."/>
    <parameter name="companyImportedAtFromDate"
               description="Companies with an imported_at within the specified date range."/>
    <parameter name="companyImportedAtToDate"
               description="Companies with an imported_at within the specified date range."/>
    <sequence>
        <property name="uri.var.page" expression="$func:page"/>
        <property name="uri.var.perPage" expression="$func:perPage"/>
        <property name="uri.var.searchId" expression="$func:searchId"/>
        <property name="uri.var.sort" expression="$func:sort"/>
        <property name="uri.var.companyId" expression="$func:companyId"/>
        <property name="uri.var.companyName" expression="$func:companyName"/>
        <property name="uri.var.companyDescription" expression="$func:companyDescription"/>
        <property name="uri.var.companyEmail" expression="$func:companyEmail"/>
        <property name="uri.var.companyPhone" expression="$func:companyPhone"/>
        <property name="uri.var.companyFax" expression="$func:companyFax"/>
        <property name="uri.var.companyAddress" expression="$func:companyAddress"/>
        <property name="uri.var.companyAddress2" expression="$func:companyAddress2"/>
        <property name="uri.var.companyCity" expression="$func:companyCity"/>
        <property name="uri.var.companyState" expression="$func:companyState"/>
        <property name="uri.var.companyZip" expression="$func:companyZip"/>
        <property name="uri.var.companyCountry" expression="$func:companyCountry"/>
        <property name="uri.var.companyCreatedFromDate" expression="$func:companyCreatedFromDate"/>
        <property name="uri.var.companyModifiedFromDate" expression="$func:companyModifiedFromDate"/>
        <property name="uri.var.companyCreatedToDate" expression="$func:companyCreatedToDate"/>
        <property name="uri.var.companyModifiedToDate" expression="$func:companyModifiedToDate"/>
        <property name="uri.var.companyImportedAtFromDate" expression="$func:companyImportedAtFromDate"/>
        <property name="uri.var.companyImportedAtToDate" expression="$func:companyImportedAtToDate"/>
        <script language="js">
            <![CDATA[
                var companyCity = mc.getProperty('uri.var.companyCity');
                var companyCreatedToDate = mc.getProperty('uri.var.companyCreatedToDate');
                var apiKey = mc.getProperty('uri.var.apiKey');
                var companyName = mc.getProperty('uri.var.companyName');
                var companyDescription = mc.getProperty('uri.var.companyDescription');
                var companyState = mc.getProperty('uri.var.companyState');
                var sort = mc.getProperty('uri.var.sort');
                var companyModifiedFromDate = mc.getProperty('uri.var.companyModifiedFromDate');
                var companyAddress2 = mc.getProperty('uri.var.companyAddress2');
                var companyImportedAtFromDate = mc.getProperty('uri.var.companyImportedAtFromDate');
                var companyId = mc.getProperty('uri.var.companyId');
                var perPage = mc.getProperty('uri.var.perPage');
                var searchId = mc.getProperty('uri.var.searchId');
                var companyEmail = mc.getProperty('uri.var.companyEmail');
                var companyPhone = mc.getProperty('uri.var.companyPhone');
                var companyAddress = mc.getProperty('uri.var.companyAddress');
                var companyFax = mc.getProperty('uri.var.companyFax');
                var companyCountry = mc.getProperty('uri.var.companyCountry');
                var companyModifiedToDate = mc.getProperty('uri.var.companyModifiedToDate');
                var attributes = mc.getProperty('uri.var.attributes');
                var page = mc.getProperty('uri.var.page');
                var companyImportedAtToDate = mc.getProperty('uri.var.companyImportedAtToDate');
                var companyZip = mc.getProperty('uri.var.companyZip');
                var companyCreatedFromDate = mc.getProperty('uri.var.companyCreatedFromDate');
                var urlQuery = '?api_key=' + apiKey;

                if (page != null && page != "") {
                    urlQuery += '&page=' + page;
                }
                if (perPage != null && perPage != "") {
                    urlQuery += '&per_page=' + perPage;
                }
                if (searchId != null && searchId != "") {
                    urlQuery += '&search_id=' + searchId;
                }
                if (sort != null && sort != "") {
                    urlQuery += '&sort=' + sort;
                }
                if (companyId != null && companyId != "") {
                    urlQuery += '&conditions[company_id]=' + companyId;
                }
                if (companyName != null && companyName != "") {
                    urlQuery += '&conditions[company_name]=' + companyName;
                }
                if (companyDescription != null && companyDescription != "") {
                    urlQuery += '&conditions[company_description]=' + companyDescription;
                }
                if (companyEmail != null && companyEmail != "") {
                    urlQuery += '&conditions[company_email]=' + companyEmail;
                }
                if (companyPhone != null && companyPhone != "") {
                    urlQuery += '&conditions[company_phone]=' + companyPhone;
                }
                if (companyFax != null && companyFax != "") {
                    urlQuery += '&conditions[company_fax]=' + companyFax;
                }
                if (companyAddress != null && companyAddress != "") {
                    urlQuery += '&conditions[company_address]=' + companyAddress;
                }
                if (companyAddress2 != null && companyAddress2 != "") {
                    urlQuery += '&conditions[company_address2]=' + companyAddress2;
                }
                if (companyCity != null && companyCity != "") {
                    urlQuery += '&conditions[company_city]=' + companyCity;
                }
                if (companyState != null && companyState != "") {
                    urlQuery += '&conditions[company_state]=' + companyState;
                }
                if (companyZip != null && companyZip != "") {
                    urlQuery += '&conditions[company_zip]=' + companyZip;
                }
                if (companyCountry != null && companyCountry != "") {
                    urlQuery += '&conditions[company_country]=' + companyCountry;
                }
                if (companyCreatedFromDate != null && companyCreatedFromDate != "") {
                    urlQuery += '&conditions[company_created][from_date]=' + companyCreatedFromDate;
                }
                if (companyModifiedFromDate != null && companyModifiedFromDate != "") {
                    urlQuery += '&conditions[company_modified][from_date]=' + companyModifiedFromDate;
                }
                if (companyCreatedToDate != null && companyCreatedToDate != "") {
                    urlQuery += '&conditions[company_created][to_date]=' + companyCreatedToDate;
                }
                if (companyModifiedToDate != null && companyModifiedToDate != "") {
                    urlQuery += '&conditions[company_modified][to_date]=' + companyModifiedToDate;
                }
                if (companyImportedAtFromDate != null && companyImportedAtFromDate != "") {
                    urlQuery += '&conditions[company_imported_at][from_date]=' + companyImportedAtFromDate;
                }
                if (companyImportedAtToDate != null && companyImportedAtToDate != "") {
                    urlQuery += '&conditions[company_imported_at][to_date]=' + companyImportedAtToDate;
                }
                if (attributes != null && attributes != "") {
                    urlQuery += '&attrs=' + attributes;
                }
                mc.setProperty('uri.var.urlQuery', urlQuery);
            ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="{+uri.var.apiUrl}/companies.json{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="Access-Control-Allow-Credentials" action="remove" scope="transport"/>
        <header name="Access-Control-Expose-Headers" action="remove" scope="transport"/>
        <header name="Access-Control-Max-Age" action="remove" scope="transport"/>
        <header name="Status" action="remove" scope="transport"/>
        <header name="Vary" action="remove" scope="transport"/>
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="ETag" action="remove" scope="transport"/>
    </sequence>
</template>
