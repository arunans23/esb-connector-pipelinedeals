<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- Method Documentation URL: https://www.pipelinedeals.com/api/docs/resources/calendar_entries -->
<template name="createCalendarEntry" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="type" description="The entry type. Specify CalendarEvent for events, and CalendarTask for tasks."/>
    <parameter name="categoryId"
               description="The event category. You can retrieve a list of event categories using the event categories api."/>
    <parameter name="name" description="The name of the event."/>
    <parameter name="description" description="A more detailed description of the event."/>
    <parameter name="startTime" description="CalendarEvents only. Specify the start_time for the event."/>
    <parameter name="endTime" description="CalendarEvents only. Specify the end time for the event."/>
    <parameter name="allDay" description="Specify that this event is all day."/>
    <parameter name="dueDate" description="Tasks only. Specify the due date."/>
    <parameter name="complete" description="Indicate whether the entry is complete or not."/>
    <parameter name="associationId" description="The id of the associated person, company, or deal."/>
    <parameter name="associationType" description="The type of association. will be Deal, Company, or Person."/>
    <parameter name="active" description="Inactive events are functionally equivalent to deleted events. ."/>
    <parameter name="createdAt" description="Timestamp for when the entry was created."/>
    <parameter name="updatedAt" description="Timestamp for when the entry was last touched."/>
    <parameter name="companyId"
               description="If this event is tied directly with a company, then this will be set to the company id."/>
    <parameter name="recurrenceRule"
               description="Specify an rrule to change the recurrence rule. This string follows the iCalendar spec, RFC2445."/>
    <parameter name="recurrenceDate"
               description="Specify an rdate to change the recurrence rule. This string follows the iCalendar spec, RFC2445."/>
    <parameter name="expirationRule"
               description="Specify an exrule to change the recurrence rule. This string follows the iCalendar spec, RFC2445."/>
    <parameter name="expirationDate"
               description="Specify an exdate to change the recurrence rule. This string follows the iCalendar spec, RFC2445."/>
    <sequence>
        <property name="uri.var.type" expression="$func:type"/>
        <property name="uri.var.categoryId" expression="$func:categoryId"/>
        <property name="uri.var.name" expression="$func:name"/>
        <property name="uri.var.description" expression="$func:description"/>
        <property name="uri.var.startTime" expression="$func:startTime"/>
        <property name="uri.var.endTime" expression="$func:endTime"/>
        <property name="uri.var.allDay" expression="$func:allDay"/>
        <property name="uri.var.dueDate" expression="$func:dueDate"/>
        <property name="uri.var.complete" expression="$func:complete"/>
        <property name="uri.var.associationId" expression="$func:associationId"/>
        <property name="uri.var.associationType" expression="$func:associationType"/>
        <property name="uri.var.active" expression="$func:active"/>
        <property name="uri.var.createdAt" expression="$func:createdAt"/>
        <property name="uri.var.updatedAt" expression="$func:updatedAt"/>
        <property name="uri.var.companyId" expression="$func:companyId"/>
        <property name="uri.var.recurrenceRule" expression="$func:recurrenceRule"/>
        <property name="uri.var.recurrenceDate" expression="$func:recurrenceDate"/>
        <property name="uri.var.expirationRule" expression="$func:expirationRule"/>
        <property name="uri.var.expirationDate" expression="$func:expirationDate"/>
        <script language="js">
            <![CDATA[
                var recurrenceDate = mc.getProperty('uri.var.recurrenceDate');
                var expirationRule = mc.getProperty('uri.var.expirationRule');
                var apiKey = mc.getProperty('uri.var.apiKey');
                var dueDate = mc.getProperty('uri.var.dueDate');
                var associationType = mc.getProperty('uri.var.associationType');
                var description = mc.getProperty('uri.var.description');
                var active = mc.getProperty('uri.var.active');
                var recurrenceRule = mc.getProperty('uri.var.recurrenceRule');
                var type = mc.getProperty('uri.var.type');
                var allDay = mc.getProperty('uri.var.allDay');
                var createdAt = mc.getProperty('uri.var.createdAt');
                var companyId = mc.getProperty('uri.var.companyId');
                var name = mc.getProperty('uri.var.name');
                var startTime = mc.getProperty('uri.var.startTime');
                var attributes = mc.getProperty('uri.var.attributes');
                var endTime = mc.getProperty('uri.var.endTime');
                var complete = mc.getProperty('uri.var.complete');
                var categoryId = mc.getProperty('uri.var.categoryId');
                var associationId = mc.getProperty('uri.var.associationId');
                var updatedAt = mc.getProperty('uri.var.updatedAt');
                var expirationDate = mc.getProperty('uri.var.expirationDate');
                var jsonPayload = {};
                var urlQuery = '?api_key=' + apiKey;

                if (attributes != null && attributes != "") {
                    urlQuery += '&attrs=' + attributes;
                }
                mc.setProperty('uri.var.urlQuery', urlQuery);
                var calendar_entry = {};
                if (type != null && type != ""){
                    calendar_entry.type = type;
                }
                if (categoryId != null && categoryId != ""){
                    calendar_entry.category_id = categoryId;
                }
                if (name != null && name != ""){
                    calendar_entry.name = name;
                }
                if (description != null && description != ""){
                    calendar_entry.description = description;
                }
                if (startTime != null && startTime != ""){
                    calendar_entry.start_time = startTime;
                }
                if (endTime != null && endTime != ""){
                    calendar_entry.end_time = endTime;
                }
                if (allDay != null && allDay != ""){
                    calendar_entry.all_day = allDay;
                }
                if (dueDate != null && dueDate != ""){
                    calendar_entry.due_date = dueDate;
                }
                if (complete != null && complete != ""){
                    calendar_entry.complete = complete;
                }
                if (associationId != null && associationId != ""){
                    calendar_entry.association_id = associationId;
                }
                if (associationType != null && associationType != ""){
                    calendar_entry.association_type = associationType;
                }
                if (active != null && active != ""){
                    calendar_entry.active = active;
                }
                if (createdAt != null && createdAt != ""){
                    calendar_entry.created_at = createdAt;
                }
                if (updatedAt != null && updatedAt != ""){
                    calendar_entry.updated_at = updatedAt;
                }
                if (companyId != null && companyId != ""){
                    calendar_entry.company_id = companyId;
                }
                if (recurrenceRule != null && recurrenceRule != ""){
                   calendar_entry.rrule = recurrenceRule;
                }
                if (recurrenceDate != null && recurrenceDate != ""){
                    calendar_entry.rdate = recurrenceDate;
                }
                if (expirationRule != null && expirationRule != ""){
                    calendar_entry.exrule = expirationRule;
                }
                if (expirationDate != null && expirationDate != ""){
                    calendar_entry.exdate = expirationDate;
                }
                jsonPayload.calendar_entry = calendar_entry;
                mc.setPayloadJSON(jsonPayload);
            ]]>
        </script>
        <call>
            <endpoint>
                <http method="post" uri-template="{+uri.var.apiUrl}/calendar_entries.json{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="Access-Control-Allow-Credentials" action="remove" scope="transport"/>
        <header name="Access-Control-Expose-Headers" action="remove" scope="transport"/>
        <header name="Access-Control-Max-Age" action="remove" scope="transport"/>
        <header name="Status" action="remove" scope="transport"/>
        <header name="Vary" action="remove" scope="transport"/>
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="ETag" action="remove" scope="transport"/>
    </sequence>
</template>
