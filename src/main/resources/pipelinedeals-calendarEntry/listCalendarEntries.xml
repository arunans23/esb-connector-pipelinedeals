<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- Method Documentation URL: https://www.pipelinedeals.com/api/docs/resources/calendar_entries -->
<template name="listCalendarEntries" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="named" description="Select only calendar entries with a name matching the exact string given."/>
    <parameter name="kind"
               description="Whether you want to return only tasks or only events. Must be either task or event. Leave out for both."/>
    <parameter name="ownerId" description="The calendar entries that are owned by owner_id."/>
    <parameter name="completed" description="If true, return only completed events."/>
    <parameter name="incomplete" description="If true, return only incomplete events."/>
    <parameter name="late" description="If true, return only late items."/>
    <parameter name="today" description="If true, return items due today."/>
    <parameter name="tomorrow" description="If true, return items due tomorrow."/>
    <parameter name="thisWeek" description="If true, return items due this week."/>
    <parameter name="nextWeek" description="If true, return items due next week."/>
    <parameter name="future" description="If true, return items due after next week."/>
    <parameter name="withinFromDate"
               description="The calendar entries that occur within the start and end time provided."/>
    <parameter name="withinToDate" description="Paired with conditions[within][start]."/>
    <parameter name="startingAt"
               description="Select calendar entries matching the exact start time given. Most datetime formats will be parsed correctly."/>
    <parameter name="endingAt"
               description="Select calendar entries matching the exact end time given. Most datetime formats will be parsed correctly."/>
    <parameter name="someday" description="Return calendar tasks with no due date."/>
    <parameter name="recurrencesOf"
               description="Pass in the id of the base event in a series, and get all other events in the series."/>
    <parameter name="nonRecurring" description="Return only events that aren't part of a series."/>
    <parameter name="baseEntries" description="Return only events that are the first (base) event in a series."/>
    <parameter name="includeInactive"
               description="Return entries marked as 'inactive', which are functionally equivalent to being deleted. Events that are part of a series that are deleted are actually just marked inactive, so that the entire series can be replicated accurately on other systems."/>
    <parameter name="calendarEntryModified"
               description="You can pass in a datetime range to qualify searches based upon the calendar entry's updated_at field."/>
    <parameter name="page" description="No. of the page to retrieve when results are paginated."/>
    <parameter name="perPage" description="Entries to list per page when results are paginated."/>
    <parameter name="searchId" description="Search calendar entries by previously saved filter with given search_id."/>
    <parameter name="sort" description="Field to sort the calendar entries."/>
    <sequence>
        <property name="uri.var.named" expression="$func:named"/>
        <property name="uri.var.kind" expression="$func:kind"/>
        <property name="uri.var.ownerId" expression="$func:ownerId"/>
        <property name="uri.var.completed" expression="$func:completed"/>
        <property name="uri.var.incomplete" expression="$func:incomplete"/>
        <property name="uri.var.late" expression="$func:late"/>
        <property name="uri.var.today" expression="$func:today"/>
        <property name="uri.var.tomorrow" expression="$func:tomorrow"/>
        <property name="uri.var.thisWeek" expression="$func:thisWeek"/>
        <property name="uri.var.nextWeek" expression="$func:nextWeek"/>
        <property name="uri.var.future" expression="$func:future"/>
        <property name="uri.var.withinFromDate" expression="$func:withinFromDate"/>
        <property name="uri.var.withinToDate" expression="$func:withinToDate"/>
        <property name="uri.var.startingAt" expression="$func:startingAt"/>
        <property name="uri.var.endingAt" expression="$func:endingAt"/>
        <property name="uri.var.someday" expression="$func:someday"/>
        <property name="uri.var.recurrencesOf" expression="$func:recurrencesOf"/>
        <property name="uri.var.nonRecurring" expression="$func:nonRecurring"/>
        <property name="uri.var.baseEntries" expression="$func:baseEntries"/>
        <property name="uri.var.includeInactive" expression="$func:includeInactive"/>
        <property name="uri.var.calendarEntryModified" expression="$func:calendarEntryModified"/>
        <property name="uri.var.page" expression="$func:page"/>
        <property name="uri.var.perPage" expression="$func:perPage"/>
        <property name="uri.var.searchId" expression="$func:searchId"/>
        <property name="uri.var.sort" expression="$func:sort"/>
        <script language="js">
            <![CDATA[
                var named = mc.getProperty('uri.var.named');
                var includeInactive = mc.getProperty('uri.var.includeInactive');
                var apiKey = mc.getProperty('uri.var.apiKey');
                var withinToDate = mc.getProperty('uri.var.withinToDate');
                var thisWeek = mc.getProperty('uri.var.thisWeek');
                var ownerId = mc.getProperty('uri.var.ownerId');
                var incomplete = mc.getProperty('uri.var.incomplete');
                var late = mc.getProperty('uri.var.late');
                var searchId = mc.getProperty('uri.var.searchId');
                var startingAt = mc.getProperty('uri.var.startingAt');
                var today = mc.getProperty('uri.var.today');
                var endingAt = mc.getProperty('uri.var.endingAt');
                var nextWeek = mc.getProperty('uri.var.nextWeek');
                var kind = mc.getProperty('uri.var.kind');
                var recurrencesOf = mc.getProperty('uri.var.recurrencesOf');
                var tomorrow = mc.getProperty('uri.var.tomorrow');
                var completed = mc.getProperty('uri.var.completed');
                var withinFromDate = mc.getProperty('uri.var.withinFromDate');
                var nonRecurring = mc.getProperty('uri.var.nonRecurring');
                var sort = mc.getProperty('uri.var.sort');
                var someday = mc.getProperty('uri.var.someday');
                var baseEntries = mc.getProperty('uri.var.baseEntries');
                var perPage = mc.getProperty('uri.var.perPage');
                var future = mc.getProperty('uri.var.future');
                var calendarEntryModified = mc.getProperty('uri.var.calendarEntryModified');
                var attributes = mc.getProperty('uri.var.attributes');
                var page = mc.getProperty('uri.var.page');
                var urlQuery = '?api_key=' + apiKey;

                if (named != null && named != "") {
                    urlQuery += '&conditions[named]=' + named;
                }
                if (kind != null && kind != "") {
                    urlQuery += '&conditions[kind]=' + kind;
                }
                if (ownerId != null && ownerId != "") {
                    urlQuery += '&conditions[owner_id]=' + ownerId;
                }
                if (completed != null && completed != "") {
                    urlQuery += '&conditions[completed]=' + completed;
                }
                if (incomplete != null && incomplete != "") {
                    urlQuery += '&conditions[incomplete]=' + incomplete;
                }
                if (late != null && late != "") {
                    urlQuery += '&conditions[late]=' + late;
                }
                if (today != null && today != "") {
                    urlQuery += '&conditions[today]=' + today;
                }
                if (tomorrow != null && tomorrow != "") {
                    urlQuery += '&conditions[tomorrow]=' + tomorrow;
                }
                if (thisWeek != null && thisWeek != "") {
                    urlQuery += '&conditions[this_week]=' + thisWeek;
                }
                if (nextWeek != null && nextWeek != "") {
                    urlQuery += '&conditions[next_week]=' + nextWeek;
                }
                if (future != null && future != "") {
                    urlQuery += '&conditions[future]=' + future;
                }
                if (withinFromDate != null && withinFromDate != "") {
                    urlQuery += '&conditions[within][from_date]=' + withinFromDate;
                }
                if (withinToDate != null && withinToDate != "") {
                    urlQuery += '&conditions[within][to_date]=' + withinToDate;
                }
                if (startingAt != null && startingAt != "") {
                    urlQuery += '&conditions[starting_at]=' + startingAt;
                }
                if (endingAt != null && endingAt != "") {
                    urlQuery += '&conditions[ending_at]=' + endingAt;
                }
                if (someday != null && someday != "") {
                    urlQuery += '&conditions[someday]=' + someday;
                }
                if (recurrencesOf != null && recurrencesOf != "") {
                    urlQuery += '&conditions[recurrences_of]=' + recurrencesOf;
                }
                if (nonRecurring != null && nonRecurring != "") {
                    urlQuery += '&conditions[non_recurring]=' + nonRecurring;
                }
                if (baseEntries != null && baseEntries != "") {
                    urlQuery += '&conditions[base_entries]=' + baseEntries;
                }
                if (includeInactive != null && includeInactive != "") {
                    urlQuery += '&conditions[include_inactive]=' + includeInactive;
                }
                if (calendarEntryModified != null && calendarEntryModified != "") {
                    urlQuery += '&conditions[calendar_entry_modified]=' + calendarEntryModified;
                }
                if (page != null && page != "") {
                    urlQuery += '&page=' + page;
                }
                if (perPage != null && perPage != "") {
                    urlQuery += '&per_page=' + perPage;
                }
                if (searchId != null && searchId != "") {
                    urlQuery += '&search_id=' + searchId;
                }
                if (sort != null && sort != "") {
                    urlQuery += '&sort=' + sort;
                }
                if (attributes != null && attributes != "") {
                    urlQuery += '&attrs=' + attributes;
                }
                mc.setProperty('uri.var.urlQuery', urlQuery);
            ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="{+uri.var.apiUrl}/calendar_entries.json{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="Access-Control-Allow-Credentials" action="remove" scope="transport"/>
        <header name="Access-Control-Expose-Headers" action="remove" scope="transport"/>
        <header name="Access-Control-Max-Age" action="remove" scope="transport"/>
        <header name="Status" action="remove" scope="transport"/>
        <header name="Vary" action="remove" scope="transport"/>
        <header name="X-Runtime" action="remove" scope="transport"/>
        <header name="X-UA-Compatible" action="remove" scope="transport"/>
        <header name="ETag" action="remove" scope="transport"/>
    </sequence>
</template>
