<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- The sequence will create a JSON object from base64 encoded version of it. The JSON object would be set to the payload. -->
<sequence xmlns="http://ws.apache.org/ns/synapse" name="base64DecodeDropboxResponse">
    <property name="binaryString" expression="//*[local-name()='binary']" />
    
	<!--Base64Decode and get the JSON object from Base64Encoded String - Issue caused by Content-Type:
			text/javascript response header. -->
    <script language="js">
		<![CDATA[
			function base64_decode(data) {
				var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
				var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = '', tmp_arr = [];
						  
				if (data.trim().length == 0) {
				  return data;
				} else {
				  data += '';
				}
										   
				do {
					// unpack four hexets into three octets using index points in b64
					h1 = b64.indexOf(data.charAt(i++));
					h2 = b64.indexOf(data.charAt(i++));
					h3 = b64.indexOf(data.charAt(i++));
					h4 = b64.indexOf(data.charAt(i++));
							  
					bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
							  
					o1 = bits >> 16 & 0xff;
					o2 = bits >> 8 & 0xff;
					o3 = bits & 0xff;
							  
					if (h3 == 64) {
					tmp_arr[ac++] = String.fromCharCode(o1);
					} else if (h4 == 64) {
					tmp_arr[ac++] = String.fromCharCode(o1, o2);
					} else {
					tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
					}
				} while (i < data.length);
						  
				dec = tmp_arr.join('');
						  
				return dec.replace(/\0+$/, '');
			}
										 
			var binaryString = mc.getProperty('binaryString');
										 
			if(binaryString != null && binaryString != ''){
				var jsonString = base64_decode(binaryString);
				mc.setPayloadJSON(jsonString);
			}
		]]>
	</script>
</sequence>
